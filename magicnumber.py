#!/usr/bin/python3
import progressbar, multiprocessing
from os.path import exists
import lzma, pickle, hmac, hashlib, io
from os.path import exists, getsize
import psutil

#DECLARATIONS
filename = "magic_numbers.db"
ipv4 = "ipv4.db"
complete_filename = "Matryoshka.db"
magic = []
ext = []
extended = []
key = "batman is okay i guess"

lzma_filters = [
    {"id": lzma.FILTER_DELTA, "dist": 5},
    {"id": lzma.FILTER_LZMA2, "preset": 7 | lzma.PRESET_EXTREME},
]

#from wikipedia
magic.append('23 21 ')
magic.append('D4 C3 B2 A1 ') #(little-endian)
magic.append('A1 B2 C3 D4 ') #(big-endian)
magic.append('4D 3C B2 A1 ') #(little-endian)
magic.append('A1 B2 3C 4D ') #(big-endian)
magic.append('0A 0D 0D 0A ')
magic.append('ED AB EE DB ')
magic.append('53 51 4C 69 74 65 20 66 6F 72 6D 61 74 20 33 00 ')
magic.append('53 50 30 31 ')
magic.append('49 57 41 44 ')
#magic.append('0')
magic.append('00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ')
magic.append('BE BA FE CA ')
magic.append('00 01 42 44 ')
magic.append('00 01 44 54 ')
magic.append('54 44 46 24 ')
magic.append('54 44 45 46 ')
magic.append('00 01 00 00 ')
magic.append('00 00 01 00 ')
magic.append('69 63 6e 73 ')
magic.append('66 74 79 70 33 67 ')
magic.append('1F 9D ')
magic.append('1F A0 ')
magic.append('2D 68 6C 30 2D ')
magic.append('2D 68 6C 35 2D ')
magic.append('42 41 43 4B 4D 49 4B 45 44 49 53 4B ')
magic.append('49 4E 44 58 ')
magic.append('62 70 6C 69 73 74 ')
magic.append('42 5A 68 ')
magic.append('47 49 46 38 37 61 47 49 46 38 39 61 ')
magic.append('49 49 2A 00 ') #(little-endian)
magic.append('4D 4D 00 2A ') #(big-endian)
magic.append('49 49 2A 00 10 00 00 00 43 52 ')
magic.append('80 2A 5F D7 ')
magic.append('52 4E 43 01 52 4E 43 02 ')
magic.append('4E 55 52 55 49 4D 47 4E 55 52 55 50 41 4C ')
magic.append('53 44 50 58 ') #(big-endian format)
magic.append('58 50 44 53 ') #(little-endian format)
magic.append('76 2F 31 01 ')
magic.append('42 50 47 FB ')
magic.append('FF D8 FF DB ')
magic.append('FF D8 FF E0 00 10 4A 46 49 46 00 01 ')
magic.append('FF D8 FF EE ')
magic.append('FF D8 FF E1 XX XX 45 78 69 66 00 00 ')
magic.append('FF D8 FF E0 ')
magic.append('00 00 00 0C 6A 50 20 20 0D 0A 87 0A ')
magic.append('FF 4F FF 51 ')
magic.append('71 6f 69 66 ')
#magic.append('46 4F 52 4D XX XX XX XX 49 4C 42 4D ')
#magic.append('46 4F 52 4D XX XX XX XX 38 53 56 58 ')
#magic.append('46 4F 52 4D XX XX XX XX 41 43 42 4D ')
#magic.append('46 4F 52 4D XX XX XX XX 41 4E 42 4D ')
#magic.append('46 4F 52 4D XX XX XX XX 41 4E 49 4D ')
#magic.append('46 4F 52 4D XX XX XX XX 46 41 58 58 ')
#magic.append('46 4F 52 4D XX XX XX XX 46 54 58 54 ')
#magic.append('46 4F 52 4D XX XX XX XX 53 4D 55 53 ')
#magic.append('46 4F 52 4D XX XX XX XX 43 4D 55 53 ')
#magic.append('46 4F 52 4D XX XX XX XX 59 55 56 4E ')
#magic.append('46 4F 52 4D XX XX XX XX 46 41 4E 54 ')
#magic.append('46 4F 52 4D XX XX XX XX 41 49 46 46 ')
magic.append('4C 5A 49 50 ')
magic.append('30 37 30 37 30 37 ')
magic.append('4D 5A ')
magic.append('5A 4D ')
magic.append('50 4B 03 04 ')
magic.append('50 4B 05 06 ') # (empty archive)
magic.append('50 4B 07 08 ') # (spanned archive)
magic.append('52 61 72 21 1A 07 00 ')
magic.append('52 61 72 21 1A 07 01 00 ')
magic.append('7F 45 4C 46 ')
magic.append('89 50 4E 47 0D 0A 1A 0A ')
#magic.append('C9 ')
magic.append('CA FE BA BE ')
magic.append('EF BB BF ')
magic.append('FF FE ')
magic.append('FE FF ')
magic.append('FF FE 00 00 ')
magic.append('00 00 FE FF ')
magic.append('2B 2F 76 38 2B 2F 76 39 2B 2F 76 2B 2B 2F 76 2F ')
magic.append('0E FE FF ')
magic.append('DD 73 66 73 ')
magic.append('FE ED FA CE ')
magic.append('FE ED FA CF ')
magic.append('FE ED FE ED ')
magic.append('CE FA ED FE ')
magic.append('CF FA ED FE ')
magic.append('25 21 50 53 ')
magic.append('25 21 50 53 2D 41 64 6F 62 65 2D 33 2E 30 20 45 50 53 46 2D 33 2E 30 ')
magic.append('25 21 50 53 2D 41 64 6F 62 65 2D 33 2E 31 20 45 50 53 46 2D 33 2E 30 ')
magic.append('49 54 53 46 03 00 00 00 60 00 00 00 ')
magic.append('3F 5F ')
magic.append('25 50 44 46 2D ')
magic.append('30 26 B2 75 8E 66 CF 11 A6 D9 00 AA 00 62 CE 6C ')
magic.append('24 53 44 49 30 30 30 31 ')
magic.append('4F 67 67 53 ')
magic.append('38 42 50 53 ')
#magic.append('52 49 46 46 XX XX XX XX 57 41 56 45 ')
#magic.append('52 49 46 46 XX XX XX XX 41 56 49 20 ')
magic.append('FF FB FF F3 FF F2 ')
magic.append('49 44 33 ')
magic.append('42 4D ')
magic.append('43 44 30 30 31 ')
magic.append('43 44 30 30 31 ')
magic.append('6D 61 69 6E 2E 62 73 ')
magic.append('4E 45 53 ')
magic.append('A0 32 41 A0 A0 A0 ')
magic.append('47 53 52 2D 31 35 34 31 ')
magic.append('A0 33 44 A0 A0 ')
magic.append('43 36 34 20 74 61 70 65 20 69 6D 61 67 65 20 66 69 6C 65 ')
magic.append('43 36 34 20 43 41 52 54 52 49 44 47 45 20 20 20 ')
magic.append('53 49 4D 50 4C 45 20 20 3D 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 54 ')
magic.append('66 4C 61 43 ')
magic.append('4D 54 68 64 ')
magic.append('D0 CF 11 E0 A1 B1 1A E1 ')
magic.append('64 65 78 0A 30 33 35 00 ')
magic.append('4B 44 4D ')
magic.append('23 20 44 69 73 6B 20 44 65 73 63 72 69 70 74 6F ')
magic.append('43 72 32 34 ')
magic.append('41 47 44 33 ')
magic.append('05 07 00 00 42 4F 42 4F 05 07 00 00 00 00 00 00 00 00 00 00 00 01 ')
magic.append('06 07 E1 00 42 4F 42 4F 06 07 E1 00 00 00 00 00 00 00 00 00 00 01 ')
magic.append('45 52 02 00 00 00 ')
magic.append('8B 45 52 02 00 00 00 ')
magic.append('6B 6F 6C 79 ')
magic.append('78 61 72 21 ')
magic.append('50 4D 4F 43 43 4D 4F 43 ')
magic.append('4E 45 53 1A ')
magic.append('75 73 74 61 72 00 30 30 75 73 74 61 72 20 20 00 ')
magic.append('4F 41 52 XX ')
magic.append('74 6F 78 33 ')
magic.append('4D 4C 56 49 ')
magic.append('44 43 4D 01 50 41 33 30 50 41 33 30 ')
magic.append('37 7A BC AF 27 1C ')
magic.append('1F 8B ')
magic.append('FD 37 7A 58 5A 00 ')
magic.append('04 22 4D 18 ')
magic.append('4D 53 43 46 ')
magic.append('53 5A 44 44 88 F0 27 33 ')
magic.append('46 4C 49 46 ')
magic.append('1A 45 DF A3 ')
magic.append('4D 49 4C 20 ')
#magic.append('41 54 26 54 46 4F 52 4D XX XX XX XX 44 4A 56 ')
magic.append('30 82 ')
magic.append('2D 2D 2D 2D 2D 42 45 47 49 4E 20 43 45 52 54 49 46 49 43 41 54 45 2D 2D 2D 2D 2D ')
magic.append('2D 2D 2D 2D 2D 42 45 47 49 4E 20 43 45 52 54 49 46 49 43 41 54 45 20 52 45 51 55 45 53 54 2D 2D 2D 2D 2D ')
magic.append('2D 2D 2D 2D 2D 42 45 47 49 4E 20 50 52 49 56 41 54 45 20 4B 45 59 2D 2D 2D 2D 2D ')
magic.append('2D 2D 2D 2D 2D 42 45 47 49 4E 20 44 53 41 20 50 52 49 56 41 54 45 20 4B 45 59 2D 2D 2D 2D 2D ')
magic.append('2D 2D 2D 2D 2D 42 45 47 49 4E 20 52 45 41 20 50 52 49 56 41 54 45 20 4B 45 59 2D 2D 2D 2D 2D ')
magic.append('50 75 54 54 59 2D 55 73 65 72 2D 4B 65 79 2D 46 69 6C 65 2D 32 3A ')
magic.append('50 75 54 54 59 2D 55 73 65 72 2D 4B 65 79 2D 46 69 6C 65 2D 33 3A ')
magic.append('2D 2D 2D 2D 2D 42 45 47 49 4E 20 4F 50 45 4E 53 53 48 20 50 52 49 56 41 54 45 20 4B 45 59 2D 2D 2D 2D 2D ')
magic.append('2D 2D 2D 2D 2D 42 45 47 49 4E 20 53 53 48 32 20 4B 45 59 2D 2D 2D 2D 2D ')
magic.append('44 49 43 4D ')
magic.append('77 4F 46 46 ')
magic.append('77 4F 46 32 ')
magic.append('3C 3F 78 6D 6C 20 ')
magic.append('3C 00 3F 00 78 00 6D 00 6C 00 20 ')
magic.append('00 3C 00 3F 00 78 00 6D 00 6C 00 20 ')
magic.append('3C 00 00 00 3F 00 00 00 78 00 00 00 6D 00 00 00 6C 00 00 00 20 00 00 00 ')
magic.append('00 00 00 3C 00 00 00 3F 00 00 00 78 00 00 00 6D 00 00 00 6C 00 00 00 20 ')
magic.append('4C 6F A7 94 93 40 ')
magic.append('00 61 73 6D ')
magic.append('CF 84 01 ')
magic.append('43 57 53 ')
magic.append('46 57 53 ')
magic.append('21 3C 61 72 63 68 3E 0A ')
#magic.append('52 49 46 46 XX XX XX XX 57 45 42 50 ')
magic.append('27 05 19 56 ')
magic.append('7B 5C 72 74 66 31 ')
magic.append('54 41 50 45 ')
#magic.append('47 ')
magic.append('00 00 01 BA ')
magic.append('00 00 01 B3 ')
magic.append('66 74 79 70 69 73 6F 6D ')
magic.append('78 01 ')
magic.append('78 5E ')
magic.append('78 9C ')
magic.append('78 DA ')
magic.append('78 20 ')
magic.append('78 7D ')
magic.append('78 BB ')
magic.append('78 F9 ')
magic.append('62 76 78 32 ')
magic.append('4F 52 43 ')
magic.append('4F 62 6A 01 ')
magic.append('53 45 51 36 ')
magic.append('65 87 78 56 ')
magic.append('55 55 AA AA ')
magic.append('78 56 34 ')
magic.append('50 41 52 31 ')
magic.append('45 4D 58 32 ')
magic.append('45 4D 55 33 ')
magic.append('1B 4C 75 61 ')
magic.append('62 6F 6F 6B 00 00 00 00 6D 61 72 6B 00 00 00 00 ')
magic.append('5B 5A 6F 6E 65 54 72 61 6E 73 66 65 72 5D ')
magic.append('52 65 63 65 69 76 65 64 3A ')
magic.append('20 02 01 62 A0 1E AB 07 02 00 00 00 ')
magic.append('37 48 03 02 00 00 00 00 58 35 30 39 4B 45 59 ')
magic.append('85 XX XX 03 ')
magic.append('28 B5 2F FD ')
magic.append('52 53 56 4B 44 41 54 41 ')
magic.append('3A 29 0A ')
magic.append('4A 6F 79 21 ')
magic.append('31 0A 30 30 ')
magic.append('34 12 AA 55 ')
magic.append('2A 2A 41 43 45 2A 2A ')
magic.append('60 EA ')
magic.append('49 53 63 28 ')
magic.append('4B 57 41 4A ')
magic.append('53 5A 44 44 ')
magic.append('5A 4F 4F ')
magic.append('50 31 0A ')
magic.append('50 34 0A ')
magic.append('50 32 0A ')
magic.append('50 35 0A ')
magic.append('50 33 0A ')
magic.append('50 36 0A ')
magic.append('D7 CD C6 9A ')
magic.append('67 69 6D 70 20 78 63 66 ')
magic.append('2F 2A 20 58 50 4D 20 2A 2F ')
magic.append('41 46 46 ')
magic.append('45 56 46 32 ')
magic.append('45 56 46 ')
magic.append('51 46 49 ')
#magic.append('52 49 46 46 XX XX XX XX 41 43 4F 4E ')
#magic.append('52 49 46 46 XX XX XX XX 43 44 44 41 ')
#magic.append('52 49 46 46 XX XX XX XX 51 4C 43 4D ')
#magic.append('52 49 46 58 XX XX XX XX 46 47 44 4D ') #(big-endian)
#magic.append('58 46 49 52 XX XX XX XX 4D 44 47 46 ') #(little-endian)
#magic.append('52 49 46 58 XX XX XX XX 4D 56 39 33 ') #(big-endian)
#magic.append('58 46 49 52 XX XX XX XX 33 39 56 4D ') #(little-endian)
magic.append('46 4C 56 ')
magic.append('3C 3C 3C 20 4F 72 61 63 6C 65 20 56 4D 20 56 69 72 74 75 61 6C 42 6F 78 20 44 69 73 6B 20 49 6D 61 67 65 20 3E 3E 3E ')
magic.append('63 6F 6E 6E 65 63 74 69 78 ')
magic.append('76 68 64 78 66 69 6C 65 ')
magic.append('49 73 5A 21 ')
magic.append('44 41 41 ')
magic.append('4C 66 4C 65 ')
magic.append('45 6C 66 46 69 6C 65 ')
magic.append('73 64 62 66 ')
magic.append('50 4D 43 43 ')
magic.append('4B 43 4D 53 ')
magic.append('72 65 67 66 ')
magic.append('21 42 44 4E ')
magic.append('44 52 41 43 4F ')
magic.append('47 52 49 42 ')
magic.append('42 4C 45 4E 44 45 52 ')
magic.append('00 00 00 0C 4A 58 4C 20 0D 0A 87 0A ')
magic.append('FF 0A ')
magic.append('00 01 00 00 00 ')
magic.append('4F 54 54 4F ')
magic.append('23 25 4D 6F 64 75 6C 65 ')
magic.append('4D 53 57 49 4D 00 00 00 D0 00 00 00 00 ')
magic.append('21 2D 31 53 4C 4F 42 1F ')
magic.append('AC ED ')
magic.append('43 72 65 61 74 69 76 65 20 56 6F 69 63 65 20 46 69 6C 65 1A 1A 00 ')
magic.append('2E 73 6E 64 ')
magic.append('DB 0A CE 00 ')
magic.append('48 5a 4c 52 00 00 00 18 ')
magic.append('46 4C 68 64 ')
magic.append('31 30 4C 46 ')
magic.append('52 4b 4d 43 32 31 30 ')
magic.append('00 01 00 00 4D 53 49 53 41 4D 20 44 61 74 61 62 61 73 65 ')
magic.append('00 01 00 00 53 74 61 6E 64 61 72 64 20 41 43 45 20 44 42 ')
magic.append('00 01 00 00 53 74 61 6E 64 61 72 64 20 4A 65 74 20 44 42 ')
magic.append('01 FF 02 04 03 02 ')
magic.append('02 64 73 73 ')
magic.append('03 64 73 73 ')
magic.append('03 00 00 00 41 50 50 52 ')
magic.append('06 06 ED F5 D8 1D 46 E5 BD 31 EF E7 FE 74 B7 1D ')
magic.append('06 0E 2B 34 02 05 01 01 0D 01 02 01 01 02 ')
magic.append('07 53 4B 46 ')
magic.append('07 64 74 32 64 64 74 64 ')
magic.append('0A 16 6F 72 67 2E 62 69 74 63 6F 69 6E 2E 70 72 ')
magic.append('0D 44 4F 43 ')
magic.append('0E 4E 65 72 6F 49 53 4F ')
magic.append('0E 57 4B 53 ')
magic.append('0F 53 49 42 45 4C 49 55 53 ')
magic.append('23 20 4D 69 63 72 6F 73 6F 66 74 20 44 65 76 65 6C 6F 70 65 72 20 53 74 75 64 69 6F ')
magic.append('23 21 41 4D 52 ')
magic.append('23 21 53 49 4C 4B 0A ')
magic.append('23 3F 52 41 44 49 41 4E 43 45 0A ')
magic.append('23 40 7E 5E ')

ext.append(' ')
ext.append('pcap ')
ext.append('pcap')
ext.append('pcap ')
ext.append('pcap')
ext.append('pcapng ')
ext.append('rpm ')
ext.append('sqlitedb sqlite db ')
ext.append('bin ')
ext.append('wad ')
#ext.append('PIC PIF SEA YTR ')
ext.append('PDB ')
ext.append('DBA ')
ext.append('DBA ')
ext.append('TDA ')
ext.append('TDF$ ')
ext.append('TDEF ')
ext.append(' ')
ext.append('ico ')
ext.append('icns ')
ext.append('3gp 3g2 ')
ext.append('z tar.z ')
ext.append('z tar.z ')
ext.append('lzh ')
ext.append('lzh ')
ext.append('bac ')
ext.append('idx ')
ext.append('plist ')
ext.append('bz2 ')
ext.append('gif ')
ext.append('tif tiff ')
ext.append('tif tiff ')
ext.append('cr2 ')
ext.append('cin ')
ext.append(' ')
ext.append('nui nup ')
ext.append('dpx ')
ext.append(' ')
ext.append('exr ')
ext.append('bpg ')
ext.append('jpg jpeg ')
ext.append('jpg jpeg ')
ext.append('jpg jpeg ')
ext.append('jpg jpeg ')
ext.append('jpg ')
ext.append('jp2 j2k jpf jpm jpg2 j2c jpc jpx mj2 ')
ext.append(' ')
ext.append(' ')
#ext.append('ilbm lbm ibm iff ')
#ext.append('8svx 8sv svx snd iff ')
#ext.append('acbm iff ')
#ext.append('anbm iff ')
#ext.append('anim iff ')
#ext.append('faxx fax iff ')
#ext.append('ftxt iff ')
#ext.append('smus smu mus iff ')
#ext.append('cmus mus iff ')
#ext.append('yuvn yuv iff ')
#ext.append('iff ')
#ext.append('aiff aif aifc snd iff ')
ext.append('lz ')
ext.append('cpio ')
ext.append('exe scr sys dll fon cpl iec ime rs tsp mz ')
ext.append('exe ')
ext.append('zip aar apk docx epub ipa jar kmz maff msix odp ods odt pk3 pk4 pptx usdz vsdx xlsx xpi ')
ext.append('zip aar apk docx epub ipa jar kmz maff msix odp ods odt pk3 pk4 pptx usdz vsdx xlsx xpi ')
ext.append('zip aar apk docx epub ipa jar kmz maff msix odp ods odt pk3 pk4 pptx usdz vsdx xlsx xpi ')
ext.append('rar ')
ext.append('rar ')
ext.append(' ')
ext.append('png ')
#ext.append('com ')
ext.append('class ')
ext.append('txt others ')
ext.append('txt others ')
ext.append('txt others ')
ext.append('txt others ')
ext.append('txt others ')
ext.append(' ')
ext.append('txt others ')
ext.append(' ')
ext.append(' ')
ext.append(' ')
ext.append(' ')
ext.append(' ')
ext.append(' ')
ext.append('ps ')
ext.append('eps epsf ')
ext.append('eps epsf ')
ext.append('chm ')
ext.append('hlp ')
ext.append('pdf ')
ext.append('asf wma wmv ')
ext.append(' ')
ext.append('ogg oga ogv ')
ext.append('psd ')
#ext.append('wav ')
#ext.append('avi ')
ext.append('mp3 ')
ext.append('mp3 ')
ext.append('bmp dib ')
ext.append('iso ')
ext.append('cdi ')
ext.append('mgw ')
ext.append('nes ')
ext.append('d64 ')
ext.append('g64 ')
ext.append('d81 ')
ext.append('t64 ')
ext.append('crt ')
ext.append('fits ')
ext.append('flac ')
ext.append('mid midi ')
ext.append('doc xls ppt msi msg ')
ext.append('dex ')
ext.append('vmdk ')
ext.append('vmdk ')
ext.append('crx ')
ext.append('fh8 ')
ext.append('cwk ')
ext.append('cwk ')
ext.append('toast ')
ext.append('toast ')
ext.append('dmg ')
ext.append('xar ')
ext.append('dat ')
ext.append('nes ')
ext.append('tar ')
ext.append('oar ')
ext.append('tox ')
ext.append('MLV ')
ext.append(' ')
ext.append('7z ')
ext.append('gz tar.gz ')
ext.append('xz tar.xz ')
ext.append('lz4 ')
ext.append('cab ')
ext.append('??_ ')
ext.append('flif ')
ext.append('mkv mka mks mk3d webm ')
ext.append('stg ')
#ext.append('djvu djv ')
ext.append('der ')
ext.append('crt pem ')
ext.append('csr pem ')
ext.append('key pem ')
ext.append('key pem ')
ext.append('key pem ')
ext.append('ppk ')
ext.append('ppk ')
ext.append(' ')
ext.append('pub ')
ext.append('dcm ')
ext.append('woff ')
ext.append('woff2 ')
ext.append('xml ')
ext.append('xml ')
ext.append('xml ')
ext.append('xml ')
ext.append('xml ')
ext.append('xml ')
ext.append('wasm ')
ext.append('lep ')
ext.append('swf ')
ext.append(' ')
ext.append('deb ')
#ext.append('webp ')
ext.append(' ')
ext.append('rtf ')
ext.append(' ')
#ext.append('ts tsv tsa mpg mpeg ')
ext.append('m2p vob mpg mpeg ')
ext.append('mpg mpeg ')
ext.append('mp4 ')
ext.append('zlib ')
ext.append('zlib ')
ext.append('zlib ')
ext.append('zlib ')
ext.append('zlib ')
ext.append('zlib ')
ext.append('zlib ')
ext.append('zlib ')
ext.append('lzfse ')
ext.append('orc ')
ext.append('avro ')
ext.append('rc ')
ext.append('p25 obt ')
ext.append('pcv ')
ext.append('pbt pdt pea peb pet pgt pict pjt pkt pmt ')
ext.append(' ')
ext.append('ez2 ')
ext.append('ez3 iso ')
ext.append('luac ')
ext.append('alias ')
ext.append('Identifier ')
ext.append('eml ')
ext.append('tde ')
ext.append('kdb ')
ext.append('pgp ')
ext.append('zst ')
ext.append('rs ')
ext.append('sml ')
ext.append(' ')
ext.append('srt ')
ext.append('vpk ')
ext.append('ace ')
ext.append('arj ')
ext.append('cab ')
ext.append('XX_ ')
ext.append('XX_ ')
ext.append('zoo ')
ext.append('pbm ')
ext.append('pbm ')
ext.append('pgm ')
ext.append('pgm ')
ext.append('ppm ')
ext.append('ppm ')
ext.append('wmf ')
ext.append('xcf ')
ext.append('xpm ')
ext.append('aff ')
ext.append('Ex01 ')
ext.append('e01 ')
ext.append('qcow ')
#ext.append('ani ')
#ext.append('cda ')
#ext.append('qcp ')
#ext.append('dcr ')
#ext.append('dcr ')
#ext.append('dir dxr drx ')
#ext.append('dir dxr drx ')
ext.append('flv ')
ext.append('vdi ')
ext.append('vhd ')
ext.append('vhdx ')
ext.append('isz ')
ext.append('daa ')
ext.append('evt ')
ext.append('evtx ')
ext.append('sdb ')
ext.append('grp ')
ext.append('icm ')
ext.append('dat hiv ')
ext.append('pst ')
ext.append('drc ')
ext.append('grib grib2 ')
ext.append('blend ')
ext.append('jxl ')
ext.append(' ')
ext.append('ttf tte dfont ')
ext.append('otf ')
ext.append(' ')
ext.append('wim swm esd ')
ext.append('slob ')
ext.append(' ')
ext.append('voc ')
ext.append('au snd ')
ext.append(' ')
ext.append('hazelrules ')
ext.append('flp ')
ext.append('flm ')
ext.append(' ')
ext.append('mny ')
ext.append('accdb ')
ext.append('mdb ')
ext.append('drw ')
ext.append('dss ')
ext.append('dss ')
ext.append('adx ')
ext.append('indd ')
ext.append('mxf ')
ext.append('skf ')
ext.append('dtd ')
ext.append('wallet ')
ext.append('doc ')
ext.append('nri ')
ext.append('wks ')
ext.append('sib ')
ext.append('dsp ')
ext.append('amr ')
ext.append('sil ')
ext.append('hdr ')
ext.append('vbe ')

extended.append('Script or data to be passed to the program following the shebang (#!)[1] ')
extended.append('Libpcap File Format[2] ')
extended.append('Libpcap File Format[2] ')
extended.append('Libpcap File Format (nanosecond-resolution)[2] ')
extended.append('Libpcap File Format (nanosecond-resolution)[2] ')
extended.append('PCAP Next Generation Dump File Format[3] ')
extended.append('RedHat Package Manager (RPM) package[4] ')
extended.append('SQLite Database[5] ')
extended.append('Amazon Kindle Update Package[6] ')
extended.append('internal WAD (main resource file of Doom)[7] ')
#extended.append('IBM Storyboard bitmap file Windows Program Information File Mac Stuffit Self-Extracting Archive IRIS OCR data file ')
extended.append('PalmPilot Database/Document File ')
extended.append('Palm Desktop Calendar Archive ')
extended.append('Palm Desktop To Do Archive ')
extended.append('Palm Desktop Calendar Archive ')
extended.append('Telegram Desktop File ')
extended.append('Telegram Desktop Encrypted File ')
extended.append('Palm Desktop Data File (Access format) ')
extended.append('Computer icon encoded in ICO file format[8] ')
extended.append('Apple Icon Image format ')
extended.append('3rd Generation Partnership Project 3GPP and 3GPP2 multimedia files ')
extended.append('compressed file (often tar zip) using Lempel-Ziv-Welch algorithm ')
extended.append('Compressed file (often tar zip) using LZH algorithm ')
extended.append('Lempel Ziv Huffman archive file Method 0 (No compression) ')
extended.append('Lempel Ziv Huffman archive file Method 5 (8KiB sliding window) ')
extended.append('AmiBack Amiga Backup data file ')
extended.append('AmiBack Amiga Backup index file ')
extended.append('Binary Property List file ')
extended.append('Compressed file using Bzip2 algorithm ')
extended.append('Image file encoded in the Graphics Interchange Format (GIF)[9] ')
extended.append('Tagged Image File Format (TIFF)[10] ')
extended.append('Tagged Image File Format (TIFF)[10] ')
extended.append('Canon RAW Format Version 2[11] Canon RAW format is based on TIFF.[12] ')
extended.append('Kodak Cineon image ')
extended.append('Compressed file using Rob Northen Compression (version 1 and 2) algorithm ')
extended.append('nuru ASCII/ANSI image and palette files ')
extended.append('SMPTE DPX image ')
extended.append('SMPTE DPX image ')
extended.append('OpenEXR image ')
extended.append('Better Portable Graphics format[13] ')
extended.append('JPEG raw or in the JFIF or Exif file format[14] ')
extended.append('JPEG raw or in the JFIF or Exif file format[14] ')
extended.append('JPEG raw or in the JFIF or Exif file format[14] ')
extended.append('JPEG raw or in the JFIF or Exif file format[14] ')
extended.append('JPEG raw or in the JFIF or Exif file format[14] ')
extended.append('JPEG 2000 format[15] ')
extended.append(' ')
extended.append('QOI The Quite OK Image Format')
#extended.append('IFF Interleaved Bitmap Image ')
#extended.append('IFF 8-Bit Sampled Voice ')
#extended.append('Amiga Contiguous Bitmap ')
#extended.append('IFF Animated Bitmap ')
#extended.append('IFF CEL Animation ')
#extended.append('IFF Facsimile Image ')
#extended.append('IFF Formatted Text ')
#extended.append('IFF Simple Musical Score ')
#extended.append('IFF Musical Score ')
#extended.append('IFF YUV Image ')
#extended.append('Amiga Fantavision Movie ')
#extended.append('Audio Interchange File Format ')
extended.append('lzip compressed file[17] ')
extended.append('cpio archive file[18] ')
extended.append('DOS MZ executable and its descendants (including NE and PE) ')
extended.append('DOS ZM executable and its descendants (rare) ')
extended.append('zip file format and formats based on it, such as EPUB, JAR, ODF, OOXML ')
extended.append('zip file format and formats based on it, such as EPUB, JAR, ODF, OOXML ')
extended.append('zip file format and formats based on it, such as EPUB, JAR, ODF, OOXML ')
extended.append('Roshal ARchive compressed archive v1.50 onwards[19] ')
extended.append('Roshal ARchive compressed archive v5.00 onwards[20] ')
extended.append('Executable and Linkable Format ')
extended.append('Image encoded in the Portable Network Graphics format[21] ')
#extended.append('CP/M 3 and higher with overlays[22] ')
extended.append('Java class file, Mach-O Fat Binary ')
extended.append('UTF-8 byte order mark, commonly seen in text files.[23][24][25] ')
extended.append('UTF-16LE byte order mark, commonly seen in text files.[23][24][25] ')
extended.append('UTF-16BE byte order mark, commonly seen in text files.[23][24][25] ')
extended.append('UTF-32LE byte order mark for text[23][25] ')
extended.append('UTF-32BE byte order mark for text[23][25] ')
extended.append('UTF-7 byte order mark for text[26][25] ')
extended.append('SCSU byte order mark for text[26][25] ')
extended.append('UTF-EBCDIC byte order mark for text[26][25] ')
extended.append('Mach-O binary (32-bit) ')
extended.append('Mach-O binary (64-bit) ')
extended.append('JKS JavakeyStore ')
extended.append('Mach-O binary (reverse byte ordering scheme, 32-bit)[27] ')
extended.append('Mach-O binary (reverse byte ordering scheme, 64-bit)[27] ')
extended.append('PostScript document ')
extended.append('Encapsulated PostScript file version 3.0[28] ')
extended.append('Encapsulated PostScript file version 3.1[28] ')
extended.append('MS Windows HtmlHelp Data ')
extended.append('Windows 3.x/95/98 Help file ')
extended.append('PDF document[29] ')
extended.append('Advanced Systems Format[30] ')
extended.append('System Deployment Image, a disk image format used by Microsoft ')
extended.append('Ogg, an open source media container format ')
extended.append('Photoshop Document file, Adobe Photoshop native file format ')
#extended.append('Waveform Audio File Format[31] ')
#extended.append('Audio Video Interleave video format[32] ')
extended.append('MPEG-1 Layer 3 file without an ID3 tag or with an ID3v1 tag (which is appended at the end of the file) ')
extended.append('MP3 file with an ID3v2 container ')
extended.append('BMP file, a bitmap format used mostly in the Windows world ')
extended.append('ISO9660 CD/DVD image file[33] ')
extended.append('CD-i CD image file ')
extended.append('Nintendo Game & Watch image file ')
extended.append('Nintendo Entertainment System image file ')
extended.append('Commodore 64 1541 disk image (D64 format) ')
extended.append('Commodore 64 1541 disk image (G64 format) ')
extended.append('Commodore 64 1581 disk image (D81 format) ')
extended.append('Commodore 64 tape image ')
extended.append('Commodore 64 cartridge image ')
extended.append('Flexible Image Transport System (FITS)[34] ')
extended.append('Free Lossless Audio Codec[35] ')
extended.append('MIDI sound file[36] ')
extended.append('Compound File Binary Format, a container format defined by Microsoft COM. It can contain the equivalent of files and directories. It is used by Windows Installer and for documents in older versions of Microsoft Office.[37] It can be used by other programs as well that rely on the COM and OLE API. ')
extended.append('Dalvik Executable ')
extended.append('VMDK files[38][39] ')
extended.append('VMware 4 Virtual Disk desription file (split disk) ')
extended.append('Google Chrome extension[40] or packaged app[41] ')
extended.append('FreeHand 8 document[42][43][44] ')
extended.append('AppleWorks 5 document ')
extended.append('AppleWorks 6 document ')
extended.append('Roxio Toast disc image file ')
extended.append('Roxio Toast disc image file ')
extended.append('Apple Disk Image file ')
extended.append('eXtensible ARchive format[45] ')
extended.append('Windows Files And Settings Transfer Repository[46] See also USMT 3.0 (Win XP)[47] and USMT 4.0 (Win 7)[48] User Guides ')
extended.append('Nintendo Entertainment System ROM file[49] ')
extended.append('tar archive[50] ')
extended.append('OAR file archive format, where ?? is the format version. ')
extended.append('Open source portable voxel file[51] ')
extended.append('Magic Lantern Video file[52] ')
extended.append('Windows Update Binary Delta Compression file[53] ')
extended.append('7-Zip File Format ')
extended.append('GZIP compressed file[54] ')
extended.append('XZ compression utility using LZMA2 compression ')
extended.append('LZ4 Frame Format[55] Remark: LZ4 block format does not offer any magic bytes.[56] ')
extended.append('Microsoft Cabinet file ')
extended.append('Microsoft compressed file in Quantum format ')
extended.append('Free Lossless Image Format ')
extended.append('Matroska media container, including WebM ')
extended.append('"SEAN : Session Analysis" Training file. Also used in compatible software "Rpw : Rowperfect for Windows" and "RP3W : ROWPERFECT3 for Windows". ')
#extended.append('DjVu document The following byte is either 55 (U) for single-page or 4D (M) for multi-page documents. ')
extended.append('DER encoded X.509 certificate ')
extended.append('PEM encoded X.509 certificate ')
extended.append('PEM encoded X.509 Certificate Signing Request ')
extended.append('PEM encoded X.509 PKCS#8 private key ')
extended.append('PEM encoded X.509 PKCS#1 DSA private key ')
extended.append('PEM encoded X.509 PKCS#1 RSA private key ')
extended.append('PuTTY private key file version 2 ')
extended.append('PuTTY private key file version 3 ')
extended.append('OpenSSH private key file ')
extended.append('OpenSSH public key file ')
extended.append('DICOM Medical File Format ')
extended.append('WOFF File Format 1.0 ')
extended.append('WOFF File Format 2.0 ')
extended.append('eXtensible Markup Language[24][57] ')
extended.append('')
extended.append('')
extended.append('')
extended.append('')
extended.append('')
extended.append('WebAssembly binary format[58] ')
extended.append('Lepton compressed JPEG image[59] ')
extended.append('Adobe Flash .swf ')
extended.append('')
extended.append('linux deb file ')
#extended.append('Google WebP image file, where ?? ?? ?? ?? is the file size. More information on WebP File Header ')
extended.append('U-Boot / uImage. Das U-Boot Universal Boot Loader.[60] ')
extended.append('Rich Text Format ')
extended.append('Microsoft Tape Format ')
#extended.append('MPEG Transport Stream (MPEG-2 Part 1)[61] ')
extended.append('MPEG Program Stream (MPEG-1 Part 1 (essentially identical) and MPEG-2 Part 1) ')
extended.append('MPEG-1 video and MPEG-2 video (MPEG-1 Part 2 and MPEG-2 Part 2) ')
extended.append('ISO Base Media file (MPEG-4) ')
extended.append('No Compression (no preset dictionary) ')
extended.append('Best speed (no preset dictionary) ')
extended.append('Default Compression (no preset dictionary) ')
extended.append('Best Compression (no preset dictionary) ')
extended.append('No Compression (with preset dictionary) ')
extended.append('Best speed (with preset dictionary) ')
extended.append('Default Compression (with preset dictionary) ')
extended.append('Best Compression (with preset dictionary) ')
extended.append('LZFSE - Lempel-Ziv style data compression algorithm using Finite State Entropy coding. OSS by Apple.[62] ')
extended.append('Apache ORC (Optimized Row Columnar) file format ')
extended.append('Apache Avro binary file format ')
extended.append('RCFile columnar file format ')
extended.append('PhotoCap Object Templates ')
extended.append('PhotoCap Vector ')
extended.append('PhotoCap Template ')
extended.append('Apache Parquet columnar file format ')
extended.append('Emulator Emaxsynth samples ')
extended.append('Emulator III synth samples ')
extended.append('Lua bytecode[63] ')
extended.append('macOS file Alias[64] (Symbolic link) ')
extended.append('Microsoft Zone Identifier for URL Security Zones[65] ')
extended.append('Email Message var5[citation needed] ')
extended.append('Tableau Datasource ')
extended.append('KDB file ')
extended.append('PGP file [66] ')
extended.append('Zstandard compress[67][68] ')
extended.append('QuickZip rs compressed archive[69][70] ')
extended.append('Smile file ')
extended.append('Preferred Executable Format ')
extended.append('SubRip File ')
extended.append('VPK file, used to store game data for some Source Engine games ')
extended.append('ACE (compressed file format)[citation needed] ')
extended.append('ARJ ')
extended.append('InstallShield CAB Archive File ')
extended.append('Windows 3.1x Compressed File ')
extended.append('Windows 9x Compressed File ')
extended.append('Zoo (file format) ')
extended.append('Portable bitmap ASCII ')
extended.append('Portable bitmap binary ')
extended.append('Portable Gray Map ASCII ')
extended.append('Portable Gray Map binary ')
extended.append('Portable Pixmap ASCII ')
extended.append('Portable Pixmap binary ')
extended.append('Windows Metafile ')
extended.append('XCF (file format) ')
extended.append('X PixMap ')
extended.append('Advanced Forensics Format ')
extended.append('EnCase EWF version 2 format ')
extended.append('EnCase EWF version 1 format ')
extended.append('qcow file format ')
#extended.append('Animated cursor ')
#extended.append('.cda file ')
#extended.append('Qualcomm PureVoice file format ')
#extended.append('Adobe Shockwave[71][72][73] ')
#extended.append('')
#extended.append('Macromedia Director file format[74][72][73] ')
#extended.append('')
extended.append('Flash Video file ')
extended.append('VirtualBox Virtual Hard Disk file format ')
extended.append('Windows Virtual PC Virtual Hard Disk file format ')
extended.append('Windows Virtual PC Windows 8 Virtual Hard Disk file format ')
extended.append('Compressed ISO image ')
extended.append('Direct Access Archive PowerISO ')
extended.append('Windows Event Viewer file format ')
extended.append('Windows Event Viewer XML file format ')
extended.append('Windows customized database ')
extended.append('Windows 3.x Program Manager Program Group file format ')
extended.append('ICC profile ')
extended.append('Windows Registry file ')
extended.append('Microsoft Outlook Personal Storage Table file ')
extended.append('3D model compressed with Google Draco[75] ')
extended.append('Gridded data (commonly weather observations or forecasts) in the WMO GRIB or GRIB2 format[76] ')
extended.append('Blender File Format[77] ')
extended.append('Image encoded in the JPEG XL format[78] ')
extended.append('')
extended.append('TrueType font ')
extended.append('OpenType font[79] ')
extended.append('Modulefile for Environment Modules[80] ')
extended.append('Windows Imaging Format file ')
extended.append('Slob (sorted list of blobs) is a read-only, compressed data store with dictionary-like interface[81] ')
extended.append('Serialized Java Data[82] ')
extended.append('Creative Voice file ')
extended.append('Au audio file format ')
extended.append('OpenGL Iris Perfomer .PFB (Performer Fast Binary)[83] ')
extended.append('Noodlesoft Hazel [84] ')
extended.append('FL Studio Project File ')
extended.append('FL Studio Mobile Project File ')
extended.append('Vormetric Encryption DPM Version 2.1 Header[85] ')
extended.append('Microsoft Money file ')
extended.append('Microsoft Access 2007 Database ')
extended.append('Microsoft Access Database ')
extended.append('Micrografx vector graphic file ')
extended.append('Digital Speech Standard (Olympus, Grundig, & Phillips) v2 ')
extended.append('Digital Speech Standard (Olympus, Grundig, & Phillips) v3 ')
extended.append('Approach index file ')
extended.append('Adobe InDesign document ')
extended.append('Material Exchange Format file ')
extended.append('SkinCrafter skin file ')
extended.append('DesignTools 2D Design file ')
extended.append('MultiBit Bitcoin wallet file ')
extended.append('DeskMate Document file ')
extended.append('Nero CD Compilation ')
extended.append('DeskMate Worksheet ')
extended.append('Sibelius Music - Score file ')
extended.append('Microsoft Developer Studio project file ')
extended.append('Adaptive Multi-Rate ACELP (Algebraic Code Excited Linear Prediction) Codec, commonly audio format with GSM cell phones. ')
extended.append('Audio compression format developed by Skype ')
extended.append('Radiance High Dynamic Range image file ')
extended.append('VBScript Encoded script ')


#print(len(magic))
#print(len(ext))
#print(len(extended))

def fix_wikipedia(magic, ext, extended):
    i = 0
    for magic_number in magic:
        magic[i] = magic_number.strip(" ")
        ext[i] = ext[i].strip(" ")
        extended[i] = extended[i].strip(" ")
        #print("[",magic[i],"]--[",ext[i],"]--[",extended[i],"]")
        i = i + 1
    return True


def write_db(filename, key, dict_raw, lzma_filters):
    bytes_key = bytes(key, 'UTF-8')
    bytes_dict = pickle.dumps(dict_raw)
    #print(bytes_dict)
    h = hmac.new(bytes_key, bytes_dict, hashlib.sha512 )

    if not exists(filename):
        with lzma.open(filename, 'wb', format=lzma.FORMAT_RAW, check=lzma.CHECK_NONE, filters=lzma_filters) as f:
            pickle.dump(dict_raw, f, protocol=pickle.HIGHEST_PROTOCOL)
            length = f.write(bytes(h.hexdigest(),encoding="UTF-8"))
            f.write(bytes("|jordan|",encoding="UTF-8"))
            f.write(bytes(str(length), encoding="UTF-8"))
        f.close()
        
    return h

def read_db(filename, key, lzma_filters):
    bytes_key = bytes(key, 'UTF-8')
    with lzma.open(filename,"rb", format=lzma.FORMAT_RAW, filters=lzma_filters) as f:
        hashing = bytearray(bytes(f.read()))
        if b'|jordan|' in hashing2:
            index = hashing2.find(b'|jordan|')
            
            length = int(bytes(hashing[index+8:]).decode("UTF-8")) #signature is 8 bytes
            
            pickled = bytes(hashing[:index-length]) #unpacked from lzma.
            
            hashing = hashing[index-length:index] #recovered from the file
            
            with io.BytesIO(pickled) as g:
                    
                old = g.getvalue()
                
                old = bytearray(old)
                    
                old[1] = old[1] -1 #TODO: FIGURE OUT WHY! THERE IS ALWAYS +1 ON THAT BYTE.
                    
                old = bytes(old)
                    
                with io.BytesIO(old) as k:
                    h = hmac.new(bytes_key,k.getbuffer(),hashlib.sha512)
                
                    if bytes(hashing).decode("UTF-8") == h.hexdigest():
                        #probably safe to load the pickle file
                        dict_recovered = pickle.load(g)
                    k.close()
                        
                g.close()
        f.close()
   
    return dict_recovered

def possibilities():
    return bytes(range(256))

def replace_byte(new_magic, position, ipv4, key, lzma_filters, dict_bytes=False):
    new = []
    for index in position: #where 'XX' is found
        if len(position) == 1:
            for more in possibilities(): #all possibilities of hexdecimal bytes.
                i = 0
                byte = f'{more:02x}' #formats hexadecimal
                new_magic[index] = byte.upper()
                #next_bytes = position[i+1] #for as long as we have 'XX' in the list
                new.append(str(new_magic))
        if len(position) == 2:
                for possibility in possibilities(): #all possibilities of hexdecimal bytes.
                    i = 0
                    byte = f'{possibility:02x}' #formats hexadecimal
                    new_magic[index] = byte.upper()
                    next_bytes = position[i+1] #for as long as we have 'XX' in the list
                    for more in possibilities():
                        more_bytes = f'{more:02x}' #formats hexadecimal
                        new_magic[next_bytes] = more_bytes.upper()
                        #print(new_magic)
                        new.append(str(new_magic))
                        i = i + 1
        if len(position) == 4:
            i = 0
            j = 0
            backup_list = []
            if not dict_bytes:
                dict_bytes = {}
                with progressbar.ProgressBar(max_value=2**32) as bar:
                    for possibility in possibilities(): #all possibilities of hexdecimal bytes.
                        byte = f'{possibility:02x}' #formats hexadecimal
                        new_magic[index] = byte.upper()
                        next_bytes = position[i+1] #for as long as we have 'XX' in the list
                        for more in possibilities():
                            more_bytes = f'{more:02x}' 
                            new_magic[next_bytes] = more_bytes.upper()
                            more_next_bytes = position[i+2]
                            for even_more in possibilities():
                                even_more_bytes = f'{even_more:02x}'
                                new_magic[more_next_bytes] = even_more_bytes.upper()
                                more_more_next_bytes = position[i+3]
                                for even_more_more in possibilities():
                                    even_more_more_bytes = f'{even_more_more:02x}'
                                    new_magic[more_more_next_bytes] = even_more_more_bytes.upper()
                                    new.append(str(new_magic))
                                    dict_bytes.update({j:[new_magic[index],new_magic[next_bytes],new_magic[more_next_bytes],new_magic[more_more_next_bytes]]})
                                    backup_list.append(j)
                                    j = j + 1
                                    bar.update(j)
            else: #load from dictionary
                k = 0
                if not exists(ipv4):
                    write_db(ipv4, key, backup_list, lzma_filters) #while having computed the list anyway...storing.
                with progressbar.ProgressBar(max_value=2**32) as bar:
                    for possibility in possibilities(): #all possibilities of hexdecimal bytes.
                        next_bytes = position[i+1]
                        for more in possibilities():
                            more_next_bytes = position[i+2]
                            for even_more in possibilities():
                                more_more_next_bytes = position[i+3]
                                for even_more_more in possibilities():
                                    new_magic[index],new_magic[next_bytes],new_magic[more_next_bytes],new_magic[more_more_next_bytes] = dict_bytes[backup_list[k]]
                                    new.append((new_magic))
                                    j = j + 1
                                    k = k + 1
                                    bar.update(k)
    if dict_bytes and not exists(filename):
        write_db(filename, key, dict_bytes, lzma_filters)
    return new, dict_bytes

def count_them(magic_list):
    count2 = 0
    size_in_ram = 0 # bytes
    for position in magic_list:
        if len(position) == 1:
            count2 = count2 + 2**8
            size_in_ram = size_in_ram + 2**8 * (256*1)
        if len(position) == 2:
            count2 = count2 + 2**16
            size_in_ram = size_in_ram + 2**16 * (256*2)
        if len(position) == 3: #in the future
            count2 = count2 + 2**24
            size_in_ram = size_in_ram + 2**24 * (256*3)
        if len(position) == 4:
            count2 = count2 + 2**32
            size_in_ram = size_in_ram + 2**32 * (256*4)
    size_in_ram = size_in_ram / 10**9
    free_ram = psutil.virtual_memory()[1] /10**9
    print("-== PROJECT -- REQUIREMENTS ==-")
    print("Minimum required RAM = ",size_in_ram , "GB")
    if free_ram > 1024:
        print("Available FREE RAM = ", free_ram / 1024, "TB")
    else:
        print("Available FREE RAM = ", free_ram, "GB")
    if size_in_ram > free_ram:
        print("Not enough RAM to complete--> ", free_ram / 1024 - size_in_ram / 1024, "TB")
        
        print("REALLY! You surely need a supercomputer with 3 times that....SHARE supercalculator time.")
        
        quit() #sorry
    return count2

count = 0
new_magic = []
added_magic = []
magic_list = []

fix_wikipedia(magic, ext, extended)

for i in range(len(magic)): #finding how many instances
    position = []
    if "XX" in magic[i]:
        new_magic = magic[i].split(" ")
        j=0
        for byte in new_magic:
            if byte == "XX":
                position.append(j)
                count = count + 1
            j = j + 1
        #print(position)
        magic_list.append(position) #bug
        del(position) #fix
        #print(magic_list)

count = count_them(magic_list)

i = 0
dict_bytes = False
pickled_in = False
while i < len(magic) + count: 
    position = []
    if "XX" in magic[i]:
        print("possibilities left=", count)
        new_magic = magic[i].split(" ")
        j=0
        for byte in new_magic:
            if byte == "XX":
                position.append(j)
            j = j + 1
        if exists(filename) and not dict_bytes and not pickled_in:
            dict_bytes = read_db(filename, key, lzma_filters)
            pickled_in = True
        else:
            added_magic, dict_bytes = replace_byte(new_magic, position, ipv4, key, lzma_filters, dict_bytes)
            
        #for one in added_magic:
        #    print(one)
        #quit()
        #print(len(magic))
        for new in added_magic.__reversed__():
            magic.insert(i, new)
            ext.insert(i,ext[i])
            extended.insert(i,extended[i])
            #print(new,"<-->", ext[i] ,"<-->", extended[i])
            #print(i)
            #quit()
            count = count - 1
            #print(count)
        #print(len(magic))
        destroyed = magic.pop(i+len(added_magic))
        ext.pop(i+len(added_magic))
        extended.pop(i+len(added_magic))
        print("DESTROYED-->",destroyed)
        print(len(magic),"<-->",len(ext),"<-->",len(extended)) #VERIFICATION PARALLEL PROCESSING - TEST OK!
        #next = i+len(added_magic)
        #print("NEXT->", magic[next] , "<-->" , ext[next] , "\n<-->", extended[next])
        
        #quit()
        del(position)
    i = i + 1
    
if len(magic) == len(ext) == len(extended): # write magic number database file
    dict_complete = {}
    
    i = 0
    
    for entry in magic:
        addy = ext[i] + " " + extended[i]
        dict_complete.update({bytes(entry.rstrip(), encoding="UTF-8"):addy})
        i = i + 1
    
    h = write_db(complete_filename, key, dict_complete, lzma_filters)
    
    print(h.hexdigest())
    
    print("DONE!")
        
